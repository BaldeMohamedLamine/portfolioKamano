========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\admin.py ==========
from django.contrib import admin

# Register your models here.

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\apps.py ==========
from django.apps import AppConfig


class AccountConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'account'

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\forms.py ==========
from django import forms
from django.contrib.auth import get_user_model

User = get_user_model()

class RegisterForm(forms.ModelForm):
    password1 = forms.CharField(
        label='Password',
        widget=forms.PasswordInput(attrs={'class': 'form-control'})
    )
    password2 = forms.CharField(
        label='Confirm Password',
        widget=forms.PasswordInput(attrs={'class': 'form-control'})
    )

    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'username', 'email', 'password1', 'password2']
        widgets = {
            'first_name': forms.TextInput(attrs={'class': 'form-control w-100'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control w-100'}),
            'username': forms.TextInput(attrs={'class': 'form-control w-100'}),
            'email': forms.EmailInput(attrs={'class': 'form-control w-100'}),
        }
    def __init__(self, *args, **kwargs):
        super(RegisterForm, self).__init__(*args, **kwargs)
        # Enlever le texte d'aide pour le champ 'username'
        self.fields['username'].help_text = ''

class LoginForm(forms.Form):
    username = forms.CharField()
    password = forms.CharField(widget=forms.PasswordInput)



========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\models.py ==========
from django.db import models

# Create your models here.

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\tests.py ==========
from django.test import TestCase

# Create your tests here.

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\urls.py ==========
from django.urls import path
from .views import loginView, registerView, logoutView

app_name = 'account'
urlpatterns = [

    path('login/',loginView,name="login"),
    path('register/',registerView,name="register"),
    path('logout/',logoutView,name="logout"),

]

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\views.py ==========
from django.shortcuts import render, redirect
from django.contrib.auth import login,authenticate, logout
from django.contrib.auth import get_user_model
from .forms import  RegisterForm, LoginForm
from django.contrib import messages

User = get_user_model()
def registerView(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            # Récupérer les données du formulaire
            first_name = form.cleaned_data.get('first_name')
            last_name = form.cleaned_data.get('last_name')
            username = form.cleaned_data.get('username')
            email = form.cleaned_data.get('email')
            password = form.cleaned_data.get('password1')
            password2 = form.cleaned_data.get('password2')
            # is_writer = form.cleaned_data.get('is_writer')


            if(password!=password2):
                messages.error(request,'les mots de passes saisis ne correspondent pas')
                pass
            else:  # Créer l'utilisateur en utilisant create_user
                user = User.objects.create_user(username=username,
                                                email=email,
                                                password=password,
                                                )
                user.first_name = first_name
                user.last_name = last_name
                if is_writer:
                    user.is_writer= True

                user.save()
                # Connecter l'utilisateur après la création
                login(request, user)

                return redirect('home')
    else:
        form = RegisterForm()

    return render(request, 'register.html', {'form': form})


def loginView(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')

            user = authenticate(request, username=username, password=password)
            if user is not None:
                # Connecter l'utilisateur si l'authentification est réussie
                login(request, user)
                return redirect('home')  # Redirige vers la page d'accueil ou une autre page après connexion
            else:
                # Ajouter un message d'erreur si l'authentification échoue
                form.add_error(None, "Nom d'utilisateur ou mot de passe incorrect.")
    else:
        form = LoginForm()

    return render(request, 'login.html', {'form': form})


def logoutView(request):
    logout(request)
    return redirect('home')

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\account\__init__.py ==========

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\admin.py ==========
from django.contrib import admin
from blog.models import Article,Comment,Category

# Register your models here.

# @admin.register(User)
# class UserAdmin(admin.ModelAdmin):
#     list_display = ('username', 'email', 'is_staff', 'is_active')
#     search_fields = ('username', 'email')
#     list_filter = ('is_staff', 'is_active')


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    pass

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    pass


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    pass



========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\apps.py ==========
from django.apps import AppConfig


class BlogConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'blog'

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\forms.py ==========
from django import forms
from blog.models import Comment


class CommentForm(forms.ModelForm):
    """Form definition for Comment."""

    class Meta:
        """Meta definition for Commentform."""

        model = Comment
        fields = ('content',)
        widgets ={
            'content':forms.Textarea(attrs={
                'placeholder':'Laissez votre commentaire ici',
                'rows':'10',
                'class':'form-control'
            })
        }

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\models.py ==========
from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class Category(models.Model):
    name = models.CharField(max_length = 150)
    image = models.ImageField(upload_to="category_images", height_field=None, width_field=None, max_length=100)



    class Meta:
        verbose_name = ("Category")
        verbose_name_plural = ("Categories")

    def __str__(self):
        return self.name




class Article(models.Model):
    title = models.CharField(max_length = 150)
    content = models.TextField()
    date = models.DateTimeField(auto_now=True, auto_now_add=False)
    image = models.ImageField(upload_to='image-blog', height_field=None, width_field=None, max_length=100)
    category = models.ManyToManyField(Category, related_name='posts')
    user = models.ForeignKey(User,on_delete=models.CASCADE)
    class Meta:
        ordering = ('date',)

    def __str__(self):
        return self.title



class Comment(models.Model):
    content = models.TextField()
    article = models.ForeignKey(Article, on_delete=models.CASCADE,related_name='comments')
    created_at = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User,on_delete=models.CASCADE)
    def __str__(self)->str:
        return f'{self.created_at}'

    class Meta:
        ordering = ('-created_at',)


========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\tests.py ==========
from django.test import TestCase

# Create your tests here.

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\urls.py ==========
from django.urls import path
from blog.views import PostListView, PostDetails
app_name = 'blog'

urlpatterns = [
    path('',PostListView.as_view(),name="blog_index"),
    path('details/<int:pk>/',PostDetails.as_view(),name="blog_details")
]

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\views.py ==========

from django.shortcuts import render, redirect
from django.urls import reverse
from django.views import generic
from .models import Article,Category, Comment
from blog.forms import CommentForm
# Create your views here.

#Liste des post
class PostListView(generic.ListView):
    model = Article
    template_name =  'portfolio/blog/post/all_posts.html'
    queryset = Article.objects.all().order_by('-date')
    paginate_by = 10
    context_object_name = 'posts'



#Details post
class PostDetails(generic.DetailView):
    model = Article
    template_name = 'portfolio/blog/post/details_post.html'
    context_object_name = 'post'

    def get_context_data(self, **kwargs) -> dict:
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        context['form'] = CommentForm()
        return context


    def post(self, request, **kwargs):

        self.object = self.get_object()
        form = CommentForm(request.POST)

        if form.is_valid():

            comment = form.save(commit=False)
            comment.article = self.object
            comment.user = request.user
            comment.save()

            # Redirection après validation du commentaire
            return redirect(reverse('blog:blog_details', kwargs={'pk': self.object.pk}))
        else:
            # Si le formulaire n'est pas valide, renvoyer les erreurs dans le contexte
            context = self.get_context_data(**kwargs)
            context['form'] = form  # Le formulaire avec les erreurs
            return self.render_to_response(context)




========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\blog\__init__.py ==========

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\asgi.py ==========
"""
ASGI config for config project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_asgi_application()

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\settings.py ==========
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bfgh9e-02sq5#9c7@7c940$rc(u202v@03s1@xbt-x_eoi^3bp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1','192.168.1.198']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'portfolio',
    'blog',
    'account'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# Media files settings
MEDIA_URL = '/media/'  # URL for accessing media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  #


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\settings_prod.py ==========
from .settings import *


SECRET_KEY = ""
DEBUG = False

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\urls.py ==========
"""
URL configuration for config project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path,include
from debug_toolbar.toolbar import debug_toolbar_urls
from django.conf.urls import handler404
from django.conf.urls import handler500

handler404 = "portfolio.views.custom_404_view"
handler500 = "portfolio.views.custom_404_view"


urlpatterns = [
    path('',include('portfolio.urls')),
    path('admin/', admin.site.urls),
    path('blog/',include('blog.urls')),
    path('auth/',include('account.urls')),
] + debug_toolbar_urls()

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\wsgi.py ==========
"""
WSGI config for config project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

application = get_wsgi_application()

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\config\__init__.py ==========

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\admin.py ==========
from django.contrib import admin
from .models import (
                            Skills,
                            CategorieProject,
                            ImageProject,
                            Technologies,
                            Projects,
                            Formation,
                            SoftSkill
                            )
# Register your models here.

@admin.register(Skills)
class SkillAdmin(admin.ModelAdmin):
    pass


@admin.register(Projects)
class ProjectAdmin(admin.ModelAdmin):
    pass


@admin.register(CategorieProject)
class CategoriesAdmin(admin.ModelAdmin):
    pass


@admin.register(ImageProject)
class ImageProjectAdmin(admin.ModelAdmin):
    pass


@admin.register(Technologies)
class TechnologiesAdmin(admin.ModelAdmin):
    pass



@admin.register(Formation)
class AdminFormation(admin.ModelAdmin):
    pass


@admin.register(SoftSkill)
class AdminSoftSkill(admin.ModelAdmin):
    pass

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\apps.py ==========
from django.apps import AppConfig


class PortfolioConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'portfolio'

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\forms.py ==========
from django import forms
from .models import Skills

class SkillsForm(forms.ModelForm):
    class Meta:
        model = Skills
        fields = ['label', 'level']
        widgets = {
            'label': forms.TextInput(
                attrs={
                    'class': 'form-label',
                    'placeholder': 'Libellé de la compétence'
                }
            ),
            'level': forms.NumberInput(
                attrs={
                    'class': 'form-label',
                    'placeholder': 'Pourcentage de maîtrise'
                }
            )
        }


    def clean_label(self):
        label = self.cleaned_data['label']
        if not label:
            raise forms.ValidationError('Le libellé ne doit pas être vide.')
        return label

    # Validation personnalisée pour le champ 'level'
    def clean_level(self):
        level = self.cleaned_data['level']
        if level is None:
            raise forms.ValidationError('Vous ne pouvez pas créer une compétence sans niveaux de compétence.')

        if level < 0 or level > 100:
            raise forms.ValidationError("Le niveau doit être compris entre 0 et 100.")

        return level

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\models.py ==========
from django.db import models
import uuid
# Create your models here.



class Skills(models.Model):
    label = models.CharField(max_length = 150)
    level= models.IntegerField()

    def __str__(self):
        return self.label


class Technologies(models.Model):
    name = models.CharField(max_length=50)
    # image = models.ImageField(upload_to="image-technologie", verbose_name="une image un un logo representant la technologie")

    def __str__(self) -> str:
        return self.name


class CategorieProject(models.Model):
    label = models.CharField(max_length=50)
    image = models.ImageField(upload_to='categori-images')

    def __str__(self) -> str:
        return self.label




class Projects(models.Model):
    title = models.CharField(max_length=50)
    description = models.TextField(max_length=500)
    technologies = models.ManyToManyField(Technologies, related_name="technologies")
    categories = models.ForeignKey(CategorieProject, on_delete=models.CASCADE, related_name="categories")
    image = models.ImageField(upload_to="project-cover")
    url = models.URLField(max_length=200, blank=True, null=True)
    published_at = models.DateTimeField( auto_now=False, auto_now_add=False)
    status = models.CharField(max_length=20, default=1) #1 ==  en cours, 2 == realisé, 3 == En production

    def __str__(self) -> str:
        return self.title

class ImageProject(models.Model):
    uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    image = models.ImageField(upload_to='image-project')
    catption  = models.CharField( max_length=50, null=True,blank=True, verbose_name="une brève description de l'image (facultatif)")
    projet = models.ForeignKey(Projects,on_delete=models.CASCADE, related_name="images")
    def __str__(self) -> str:
        return f'{self.uid}'



class Formation(models.Model):
    label = models.CharField(max_length=100, verbose_name="Intitulé de la formation")
    trainer = models.CharField(max_length=100, verbose_name="Institution")
    duration = models.CharField(max_length=50, verbose_name="Durée de la formation")  # Ex: '3 mois', '6 semaines'
    date_started = models.DateField(null=True, blank=True, verbose_name="Date de debut")
    date_completed = models.DateField(null=True, blank=True, verbose_name="Date d'achèvement")
    certificate = models.FileField(upload_to='certificates/', null=True, blank=True, verbose_name="Certificat")

    def __str__(self):
        return f'{self.label} - {self.trainer}'


class SoftSkill(models.Model):
    label = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self) -> str:
        return self.label

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\tests.py ==========
from django.test import TestCase

# Create your tests here.

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\urls.py ==========
from django.urls import path
from .views import (
                    index,
                    SkillCreateView,
                    ProjectDetailView
                    )
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('',index,name="home"),
    path('skill/create/',SkillCreateView.as_view(),name="skill-create"),
    path('projectDetail/<int:pk>',ProjectDetailView.as_view(), name="project-detail")
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\views.py ==========
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import CreateView, DetailView
from .forms import SkillsForm
from .models import Skills,Projects,CategorieProject, Formation, SoftSkill
from blog.models import Article,Comment
# Create your views here.

def index(request):

    #my skills
    skills = Skills.objects.all()
    #my projects
    projects = Projects.objects.all().order_by('-published_at')
    #categories projects
    projects_categories = CategorieProject.objects.all()
    #traitement du formulaaire d'enregistrement d'une compétence, (à supprimer parce que ça va etre coté administrateur seulement)
    form = SkillsForm()
    if request.method == "POST":
        form = SkillsForm(request.POST)
        if form.is_valid():
            form.save()
            # messages.success(request,'Compétenses ajoutée avec succès')

    #Récupération des formations suivies
    trainings = Formation.objects.all().order_by('date_completed')

    #Récupération des compétences propres (sofltSkills)
    softskills = SoftSkill.objects.all()

    # Récupération des 5 derniers post du blog
    last_post = Article.objects.all().order_by('date')[:5]

    context ={
        'skills': skills,
        'projects': projects,
        'projets_cat': projects_categories,
        'form': form,
        'trainings': trainings,
        'softskills': softskills,
        'last_post': last_post,
    }
    return render(request,'portfolio/index.html',context)


class SkillCreateView(CreateView):
    model = Skills
    form_class = SkillsForm
    template_name = "portfolio/skills/create_form.html"
    success_url = reverse_lazy("home")


class ProjectDetailView(DetailView):
    model = Projects
    template_name = 'portfolio/projets/details.html'
    context_object_name = 'project'



def custom_404_view(request, exception=None):
    context = {
        "detail":"Impossible de touver la ressource demander, veuillez venir à la page d'accueil",
        'status':404
    }
    return render(request,"portofolio/customs_error_pages/404.html")

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\portfolio\__init__.py ==========

========== C:\Users\pc\Desktop\CoursBackend_NimbaHub\CoursDjango\portfolio\manage.py ==========
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
